{"version":3,"sources":["components/Chart/Chart.js","store/reducers/data.js","store/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","sales","_this2","dispatch","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","salesArr","i","wrap","_context","prev","next","type","console","log","length","push","t","Date","weekEnding","y","retailSales","setState","stop","apply","arguments","getSalesData","react_default","createElement","es","datasets","label","borderColor","options","maintainAspectRatio","scales","xAxes","time","unit","height","width","Component","connect","require","reducer","undefined","action","newState","assign","salesData","title","image","subtitle","tags","appReducer","combineReducers","dataReducer","store","createStore","App","react_redux_es","className","components_Chart_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kwPAKMA,cAEN,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,KACNC,MAAO,MAJOT,mFAQC,IAAAU,EAAAP,KACTQ,EAAaR,KAAKJ,MAAlBY,UACQ,eAAAC,EAAAX,OAAAY,EAAA,EAAAZ,CAAAa,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAR,EAAAS,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACXZ,EAAS,CAACa,KAAM,qBADL,OAKjB,IAHAC,QAAQC,IAAIhB,EAAKX,MAAMS,MACjBC,EAAQC,EAAKX,MAAMS,KAAKC,MAC1BS,EAAW,GACPC,EAAE,EAAGA,EAAEV,EAAMkB,OAAQR,IAC3BD,EAASU,KAAK,CAACC,EAAG,IAAIC,KAAKrB,EAAMU,GAAGY,YAAaC,EAAGvB,EAAMU,GAAGc,cAE/DvB,EAAKwB,SAAS,CAAC1B,KAAME,EAAKX,MAAMS,KAAMC,MAAOS,IAR5B,wBAAAG,EAAAc,SAAAlB,MAAH,yBAAAL,EAAAwB,MAAAjC,KAAAkC,aAAA,EAWhBC,oCAIE,OAAInC,KAAKI,MAAMC,KACR+B,EAAAxB,EAAAyB,cAAA,WACGD,EAAAxB,EAAAyB,cAACC,EAAA,EAAD,CACAjC,KAAM,CACFkC,SAAU,CAAC,CACXC,MAAO,eACPC,YAAa,oBACbpC,KAAML,KAAKI,MAAME,SAGrBoC,QAAS,CAACC,qBAAqB,EAC/BC,OAAQ,CACVC,MAAO,CAAC,CACJxB,KAAM,OACNyB,KAAM,CACFC,KAAM,aAIZC,OAAQ,IACRC,MAAO,OApBW,YA3BZC,aAyDLC,cAJS,SAAA/C,GAAK,MAAK,CAChCC,KAAMD,EAAMC,OAGC8C,CAAyBxD,WC9DlCU,EAAO+C,EAAQ,KAwBNC,EAlBC,WAAyC,IAAxCjD,EAAwC8B,UAAAV,OAAA,QAAA8B,IAAApB,UAAA,GAAAA,UAAA,GAHhD7B,EAAK,GAGgCkD,EAAWrB,UAAAV,OAAA,EAAAU,UAAA,QAAAoB,EAEnDE,EAAW1D,OAAO2D,OAAO,GAAIrD,GAEjC,OAAOmD,EAAOlC,MACZ,IAAK,mBACL,IAAIqC,EAAY,GAMhB,OALAA,EAAS,MAAYF,EAASG,MAC9BD,EAAS,MAAYF,EAASI,MAC9BF,EAAS,SAAeF,EAASK,SACjCH,EAAS,KAAWF,EAASM,KAC7BJ,EAAS,MAAYF,EAASlD,MACvBoD,EACP,QACI,OAAOtD,ICjBT2D,EAAaC,YAAgB,CACjC3D,KAAM4D,ICER,IAAMC,EDEGC,YAAYJ,GCUNK,MAVf,WACE,OACEhC,EAAAxB,EAAAyB,cAACgC,EAAA,EAAD,CAAUH,MAAOA,GACf9B,EAAAxB,EAAAyB,cAAA,OAAKiC,UAAU,OACblC,EAAAxB,EAAAyB,cAACkC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAxB,EAAAyB,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.231da08f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {connect} from \"react-redux\";\n\n\nclass Chart extends Component {\n\nconstructor(props){\n  super(props);\n  this.state = {\n    data: null,\n    sales: null,\n  }\n}\n\ncomponentDidMount(){\n  const { dispatch } = this.props;\n  var getSalesData = async () =>{\n    await dispatch({type: \"FETCH_SALES_DATA\"});\n    console.log(this.props.data)\n    const sales = this.props.data.sales;\n    let salesArr = [];\n    for(let i=0; i<sales.length; i++){\n      salesArr.push({t: new Date(sales[i].weekEnding), y: sales[i].retailSales});\n    }\n    this.setState({data: this.props.data, sales: salesArr});\n\n  }\n  getSalesData();\n}\n\n  render(){\n    if(!this.state.data) return null;\n    return <div>\n              <Line \n              data={{\n                  datasets: [{\n                  label: \"Retail Sales\",\n                  borderColor: 'rgb(255, 99, 132)',\n                  data: this.state.sales\n                  }]\n              }}\n              options={{maintainAspectRatio: false, \n              scales: {\n            xAxes: [{\n                type: 'time',\n                time: {\n                    unit: 'month',\n                }\n            }]\n        }}}\n              height={300}\n              width={300} \n              />\n           </div>\n  }\n}\n\nconst mapStateToProps = state => ({\n  data: state.data\n})\n\nexport default connect(mapStateToProps)(Chart);","const data = require(\"../../Webdev_data2.json\");\n\nconst get_INITIAL_STATE = () => {\n  return data[0];\n}\n\nconst reducer = (state = get_INITIAL_STATE(), action) => {\n\n  let newState = Object.assign({}, state);\n\n  switch(action.type) {\n    case \"FETCH_SALES_DATA\":\n    let salesData = {};\n    salesData[\"title\"] = newState.title;\n    salesData[\"image\"] = newState.image;\n    salesData[\"subtitle\"] = newState.subtitle;\n    salesData[\"tags\"] = newState.tags;\n    salesData[\"sales\"] = newState.sales;\n    return salesData;\n    default:\n        return state;\n  }\n}\n\nexport default reducer;\n","import { createStore, combineReducers } from 'redux';\nimport dataReducer from \"./reducers/data\";\n\nconst appReducer = combineReducers({\n  data: dataReducer\n});\n\nexport default function configureStore() {\n  return createStore(appReducer);\n}","import React from 'react';\nimport './App.css';\nimport Chart from './components/Chart/Chart';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Chart />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}